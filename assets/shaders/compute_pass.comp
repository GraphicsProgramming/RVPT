#version 450
#extension GL_GOOGLE_include_directive : require

#include "structs.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform writeonly image2D resultImage;

// Global Variables //
ivec2 dim = imageSize(resultImage);
float aspect = float(dim.x) / float(dim.y);
Camera cam;
Sphere[1] spheres;
// End Global Variables //

bool intersectSpheres(Ray ray){
    for(int i=0; i<spheres.length(); i++){
        vec3 oc = ray.origin - spheres[i].origin;
        float b = dot(oc, ray.direction);
        float c = dot(oc, oc) - spheres[i].radius * spheres[i].radius;
        float delta = b * b - c;
        if(delta > 0.0f){
            delta = sqrt(delta);
            float t0 = (-b-delta);
            float t1 = (-b+delta);
            if(!(t0 < 0 || t1 < 0)){
                return true;
            }
        }
    }
    return false;
}

Ray getRay(vec2 pixel){
    return Ray(cam.origin, normalize((cam.center + cam.horizontal * pixel.x + cam.vertical * pixel.y) - cam.origin));
}

void main()
{
    // Setup Scene //
    spheres[0] = Sphere(vec3(0, 0, 0), 2.0f);
    // End Scene Setup //

    // Setup Camera //
    vec3 lookfrom = vec3(0, 0, -10);
    vec3 lookto = vec3(0, 0, 0);
    vec3 center, horizontal, vertical;
    vec3 up = vec3(0, 1, 0);
    ivec2 size = imageSize(resultImage);
    float theta = 90 * 3.1415f / 180;
    float half_width = tan(theta / 2);
    float half_height = aspect * half_width;
    vec3 w = normalize(lookto - lookfrom);
    vec3 u = normalize(cross(up, w));
    vec3 v = cross(w, u);
    center = lookfrom + w;
    horizontal = u * 2 * half_width;
    vertical = v * 2 * half_height;
    cam = Camera(lookfrom, center, horizontal, vertical);
    // End Camera Setup //

    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
    vec2 normalizedPixelCoordinates = uv * 2 - 1;
    Ray ray = getRay(normalizedPixelCoordinates);
    vec4 final_color;
    if(intersectSpheres(ray)){
        final_color = vec4(1, 1, 1, 0);
    } else {
        final_color = vec4(uv.x, uv.y, 1.0 - uv.x, 0.0);
    }
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), final_color);
}