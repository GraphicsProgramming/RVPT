#version 450
#extension GL_GOOGLE_include_directive : require

#include "structs.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(binding = 0, rgba8) uniform writeonly image2D result_image;
layout(binding = 1) uniform Background { vec4 color; }
background;

// Global Variables //
ivec2 dim = imageSize(result_image);
float aspect = float(dim.x) / float(dim.y);
Camera cam;
Sphere[1] spheres;
// End Global Variables //

bool intersect_spheres(Ray ray)
{
    for (int i = 0; i < spheres.length(); i++)
    {
        vec3 oc = ray.origin - spheres[i].origin;
        float b = dot(oc, ray.direction);
        float c = dot(oc, oc) - spheres[i].radius * spheres[i].radius;
        float delta = b * b - c;

        if (delta > 0.0f)
        {
            delta = sqrt(delta);
            float t0 = (-b - delta);
            float t1 = (-b + delta);
            if (!(t0 < 0 || t1 < 0)) return true;
        }
    }

    return false;
}

Ray get_ray(vec2 pixel)
{
    return Ray(cam.origin, normalize((cam.center + cam.horizontal * pixel.x +
                                      cam.vertical * pixel.y) -
                                     cam.origin));
}

void main()
{
    // Setup Scene //
    spheres[0] = Sphere(vec3(0.0f, 0.0f, 0.0f), 2.0f);
    // End Scene Setup //

    // Setup Camera //
    vec3 look_from = vec3(0.0f, 0.0f, -10.0f);
    vec3 target = vec3(0.0f, 0.0f, 0.0f);
    vec3 up = vec3(0.0f, 1.0f, 0.0f);

    vec3 center, horizontal, vertical;

    float theta = 90.0f * 3.1415f / 180.0f;
    float half_width = tan(theta / 2.0f);
    float half_height = aspect * half_width;

    vec3 w = normalize(target - look_from);
    vec3 u = normalize(cross(up, w));
    vec3 v = cross(w, u);

    center = look_from + w;
    horizontal = u * 2.0f * half_width;
    vertical = v * 2.0f * half_height;

    cam = Camera(look_from, center, horizontal, vertical);
    // End Camera Setup //

    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;
    vec2 ndc = uv * 2.0f - 1.0f;
    Ray ray = get_ray(ndc);

    vec4 final_color;
    if (intersect_spheres(ray))
        final_color = vec4(1, 1, 1, 0);
    else
        final_color = background.color;  // vec4(uv.x, uv.y, 1.0 - uv.x, 0.0);

    imageStore(result_image, ivec2(gl_GlobalInvocationID.xy), final_color);
}
